//importing the packages
import org.apache.spark.graphx._
import org.apache.spark.sql.Row
import org.apache.spark.storage.StorageLevel.DISK_ONLY
//creating grid data structure to hold the grid data items
case class Grid (id:Long, shape: String, numSides:Int, coordinates: Seq[Tuple2[Float, Float]], cellId:
Long) {
override def toString = {
s"Cell $cellId"
}
}
//creating function that maps rows to grids
def createGrids(row : Row) : (VertexId, Grid) = {
val arrayofTypes = row.getAs[Seq[Seq[Float]]](3) map (i => (i(0), i(1)))
val id : VertexId = row.getLong(0)
(id, Grid(row.getLong(0), row.getString(1), row.getInt(2), arrayofTypes, row.getLong(4)))
}
// reading the necessary features from grid and adding them to nodes
val gridRDD = (sqlContext.read.json("/user/maria_dev/grid")
 .selectExpr("explode(features) as rec")
 .selectExpr("rec.id", "rec.geometry.type", "size(rec.geometry.coordinates[0]) as
numSides", "rec.geometry.coordinates[0] as coordinates", "rec.properties.cellId")
 ) map (createGrids)
//Converting to an RDD object
val gridRDDV = gridRDD.rdd
//returning the RDD of key value tuples
val gridRDDVertices = gridRDDV.keyBy(_.id)
val vertices = VertexRDD(gridRDDVertices).persist(DISK_ONLY)
//View the structure of Interaction data set
head MItoMI-2013-11-03.txt -n 50
//Loading the strength information
val cdrRDD = sc.textFile("/user/maria_dev/mitomi")
//Loading Edges information
val edge = (cdrRDD map ( cdr =>{
 val parts = cdr.split("\t")
 ((parts(1).toInt, parts(2).toInt), (parts(0).toLong, parts(3).toFloat))
 })
combineByKey(((a : (Long, Float)) => a._2),
 ((a : Float, b : (Long, Float)) => a + b._2),
 ((a : Float, b : Float) => a + b)
 ) map ((l: ((Int, Int),Float)) => Edge[Float](l._1._1, l._1._2, l._2))
 )
val edges = edge.persist(DISK_ONLY)
val graph = Graph(nodes, edges)
//Computing number of edges and Vertices
graph.numEdges
graph.numVertices
//Page Rank Algorithm
val ranks = graph.pageRank(0.1).vertices
ranks.join(vertices).sortBy(_._2._1, false).take(10).foreach(println)
//Number of calls between stations
graph.groupEdges((edge1,edge2) => edge1 + edge2).triplets.sortBy(_.attr,
ascending=false).map(triplet => "There were " + triplet.attr.toString + "calls from " + triplet.srcAttr + "
to " + triplet.dstAttr + ".") .take(10).foreach(println)
//Computing Indegree and Outdegree
val inDegVert = graph.inDegrees
val inDegVert = graph.inDegrees
inDegVert.sortBy(_._2, false).take(10).foreach(println)
inDegVert.sortBy(_._2, true).take(10).foreach(println)
val outDegVert = graph.outDegrees
outDegVert.sortBy(_._2, false).take(10).foreach(println)
outDegVert.sortBy(_._2, true).take(10).foreach(println)
//Creating a table of cellId, indegree and outdegree
val tab1 = outDegVert.leftOuterJoin(inDegVert) map (m => (m._1, (m._2._1, m._2._2
match {
case Some(x) => x
case None => 0f
})))
//Calculate Aggregate messages between stations.
val inDegVal = graph.aggregateMessages[Float](ctx => ctx.sendToDst(ctx.attr), _ +
_)
inDegVal.sortBy(_._2, false).take(10).foreach(println)
inDegVal.sortBy(_._2, true).take(10).foreach(println)
val outDegVal = graph.aggregateMessages[Float](ctx => ctx.sendToSrc(ctx.attr), _ +
_)
outDegVal.sortBy(_._2, false).take(10).foreach(println)
outDegVal.sortBy(_._2, true).take(10).foreach(println)
//create a data structure of interaction strengths.
val tab2 = outDegVal.leftOuterJoin(inDegVal) map (m => (m._1, (m._2._1, m._2._2
match {
case Some(x) => x
case None => 0f
})))
//create a new structure with cellId, outdeg, indeg, outdegval, indegval
val tab12 = tab1.join(tab2) map (i => (i._1, (i._2._1._1, i._2._1._2,
i._2._2._1,i._2._2._2)))
//identify within-station call iteraction graph
val withinCellSubGraph = graph.subgraph(epred = et => et.srcId == et.dstId) //
val winthinCelCallStrength = withinCellSubGraph.aggregateMessages[Float](ctx =>
ctx.sendToSrc(ctx.attr), _ + _)
winthinCelCallStrength.sortBy(_._2, false).take(10).foreach(println)
winthinCelCallStrength.sortBy(_._2, true).take(10).foreach(println)
//cellId, outdeg, indeg, outdegval, indegval, withinGridVal
val tab22 = tab12.leftOuterJoin(winthinCelCallStrength) map (i => {
val strg : Float = i._2._2 match {
case Some(x) => x
case None => 0f
}
(i._1, (i._2._1._1, i._2._1._2, i._2._1._3, i._2._1._4, strg))
}) map (i =>
s"${i._1}\t${i._2._1}\t${i._2._2}\t${i._2._3}\t${i._2._4}\t${i._2._5}")
//save to hdfs
tab22.saveAsTextFile("/user/cloudera/output/dandelion/milan/interaction_output")
tab22.take(20).foreach(println)
